# tests/test_example_scripts.py
import subprocess
import sys
import os
import pytest

# Dynamically add project root to sys.path to allow examples to import 'data' package
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)


# List of example scripts to test
# Paths are relative to the project root, where pytest is expected to be run from.
example_scripts = [
    "examples/collaborative_filtering/item_cf_example.py",
    "examples/collaborative_filtering/user_cf_example.py",
    "examples/matrix_factorization/svd_example.py",
    "examples/content_based/tfidf_example.py",
    "examples/deep_learning/dnn_recommender.py",
    "examples/sequential/transformer_sasrec_example.py",
    "examples/hybrid/two_tower_hybrid_example.py",
    "examples/gnn/lightgcn_tf_example.py",
    "examples/gnn/ngcf_example.py",      # New
    "examples/gnn/pinsage_example.py",   # New
    "examples/gnn/gcn_example.py",       # New
    "examples/gnn/graphsage_example.py", # New
    "examples/gnn/gat_example.py",       # New
]

@pytest.mark.parametrize("script_path_rel", example_scripts)
def test_run_example_script(script_path_rel):
    """
    Test that an example script runs successfully and produces output.
    Assumes dummy data might be generated by the scripts themselves if not present.
    """
    script_path_abs = os.path.join(project_root, script_path_rel)
    assert os.path.exists(script_path_abs), f"Script not found: {script_path_abs}"

    # Clean up dummy files before running each script to ensure it generates its own fresh data if designed to.
    # This prevents interference from data generated by other tests (like test_data_generation.py)
    # or previous script runs with different parameters.
    data_files_to_clean = [
        os.path.join(project_root, 'data/dummy_interactions.csv'),
        os.path.join(project_root, 'data/dummy_item_metadata.csv'),
        os.path.join(project_root, 'data/dummy_sequences.csv')
    ]
    for f_path in data_files_to_clean:
        if os.path.exists(f_path):
            os.remove(f_path)
            print(f"INFO: Removed {f_path} before running {script_path_rel}")

    # For dnn_recommender, ensure TF doesn't log too much to stderr making it look like an error
    # Also, ensure consistent behavior for other scripts by starting with a clean copy of env.
    env = os.environ.copy()
    # Apply TF settings for all TF based scripts
    tf_scripts = [
        "dnn_recommender.py",
        "transformer_sasrec_example.py",
        "two_tower_hybrid_example.py",
        "lightgcn_tf_example.py"
    ]
    if any(tf_script in script_path_rel for tf_script in tf_scripts):
        env["TF_CPP_MIN_LOG_LEVEL"] = "2" # Suppress TensorFlow INFO and WARNING logs
        # On some systems, KMP_DUPLICATE_LIB_OK can be needed for TensorFlow if OpenMP libs clash
        env["KMP_DUPLICATE_LIB_OK"]="TRUE"


    # Ensure the 'data' directory exists at the project root, as scripts might try to write to it
    data_dir = os.path.join(project_root, 'data')
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)
        print(f"INFO: Created data directory at {data_dir} for test run.")

    process = subprocess.run(
        [sys.executable, script_path_abs], # Use absolute path to script
        capture_output=True,
        text=True,
        check=False, # Don't raise exception on non-zero exit, we'll assert it
        env=env,
        cwd=project_root # Run script with CWD as project root, so it can find 'data' dir easily
    )

    # For debugging purposes if a test fails:
    if process.returncode != 0:
        print(f"--- STDOUT for {script_path_rel} ---")
        print(process.stdout)
        print(f"--- STDERR for {script_path_rel} ---")
        print(process.stderr)

    assert process.returncode == 0, f"Script {script_path_rel} failed with error code {process.returncode}.\nStderr:\n{process.stderr}"
    assert len(process.stdout) > 0, f"Script {script_path_rel} produced no stdout output."

    # Generic check for recommendation output keywords
    # Loosened the check as exact phrasing can vary or be in different languages
    # SASRec: "추천된 다음 아이템", Two-Tower: "추천된 아이템"
    # Common: "유사도 점수", "예측 점수"
    generic_keywords_present = (
        "추천 아이템 목록" in process.stdout or
        "recommendation list" in process.stdout.lower() or
        "예상 평점" in process.stdout or
        "predicted_rating" in process.stdout.lower() or
        "예상 점수" in process.stdout or
        "유사도:" in process.stdout or # For TF-IDF like
        "추천된 다음 아이템" in process.stdout or # For SASRec
        "추천된 아이템" in process.stdout or # For Two-Tower
        "유사도 점수" in process.stdout # For Two-Tower
    )

    new_gnn_scripts_placeholders = [
        "examples/gnn/ngcf_example.py",
        "examples/gnn/pinsage_example.py",
        "examples/gnn/gcn_example.py",
        "examples/gnn/graphsage_example.py",
        "examples/gnn/gat_example.py",
    ]
    if script_path_rel not in new_gnn_scripts_placeholders:
        assert generic_keywords_present,                f"Script {script_path_rel} did not contain expected recommendation keywords in stdout.\nStdout:\n{process.stdout}"

    # Specific checks for script completion messages or unique output
    if "dnn_recommender.py" in script_path_rel:
        assert "MAE =" in process.stdout, f"DNN script {script_path_rel} did not contain MAE in stdout.\nStdout:\n{process.stdout}"
        assert "DNN 기반 추천 예제 실행 완료" in process.stdout
    elif "svd_example.py" in script_path_rel:
        assert "SVD 예제 실행 완료" in process.stdout
    elif "tfidf_example.py" in script_path_rel:
        assert "콘텐츠 기반 필터링 (TF-IDF) 예제 실행 완료" in process.stdout
    elif "item_cf_example.py" in script_path_rel:
        assert "아이템 기반 협업 필터링 예제 실행 완료" in process.stdout
    elif "user_cf_example.py" in script_path_rel:
        assert "사용자 기반 협업 필터링 예제 실행 완료" in process.stdout
    elif "transformer_sasrec_example.py" in script_path_rel:
        assert "SASRec 예제 실행 완료" in process.stdout
    elif "two_tower_hybrid_example.py" in script_path_rel:
        assert "Two-Tower Hybrid Recommender 예제 실행 완료" in process.stdout
    elif "lightgcn_tf_example.py" in script_path_rel:
        assert "LightGCN (TensorFlow/Keras) 예제 실행 완료" in process.stdout
    elif "ngcf_example.py" in script_path_rel:
        assert "Note: This is a placeholder script. Full NGCF implementation is pending." in process.stdout
    elif "pinsage_example.py" in script_path_rel:
        assert "Note: This is a placeholder script. Full PinSage implementation is pending." in process.stdout
    elif "gcn_example.py" in script_path_rel:
        assert "Note: This is a placeholder script. Full GCN implementation for recommendations is pending." in process.stdout
    elif "graphsage_example.py" in script_path_rel:
        assert "Note: This is a placeholder script. Full GraphSAGE implementation for recommendations is pending." in process.stdout
    elif "gat_example.py" in script_path_rel:
        assert "Note: This is a placeholder script. Full GAT implementation for recommendations is pending." in process.stdout
